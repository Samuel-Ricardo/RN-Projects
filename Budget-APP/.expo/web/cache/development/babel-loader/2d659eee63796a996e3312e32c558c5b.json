{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/samuelkeullen/NodeProjects/Simple-Budget-App-master/src/components/keyboard.component.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nvar TextInputState = TextInput.State;\n\nvar KeyboardShift = function (_Component) {\n  _inherits(KeyboardShift, _Component);\n\n  var _super = _createSuper(KeyboardShift);\n\n  function KeyboardShift() {\n    var _this;\n\n    _classCallCheck(this, KeyboardShift);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      shift: new Animated.Value(0)\n    };\n\n    _this.handleKeyboardDidShow = function (event) {\n      var _Dimensions$get = Dimensions.get('window'),\n          windowHeight = _Dimensions$get.height;\n\n      var keyboardHeight = event.endCoordinates.height;\n      var currentlyFocusedField = TextInputState.currentlyFocusedField();\n      UIManager.measure(currentlyFocusedField, function (originX, originY, width, height, pageX, pageY) {\n        var fieldHeight = height;\n        var fieldTop = pageY;\n        var gap = windowHeight - keyboardHeight - (fieldTop + fieldHeight);\n\n        if (gap >= 0) {\n          return;\n        }\n\n        Animated.timing(_this.state.shift, {\n          toValue: gap,\n          duration: 200,\n          useNativeDriver: true\n        }).start();\n      });\n    };\n\n    _this.handleKeyboardDidHide = function () {\n      Animated.timing(_this.state.shift, {\n        toValue: 0,\n        duration: 200,\n        useNativeDriver: true\n      }).start();\n    };\n\n    return _this;\n  }\n\n  _createClass(KeyboardShift, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.keyboardDidShowSub = Keyboard.addListener('keyboardDidShow', this.handleKeyboardDidShow);\n      this.keyboardDidHideSub = Keyboard.addListener('keyboardDidHide', this.handleKeyboardDidHide);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.keyboardDidShowSub.remove();\n      this.keyboardDidHideSub.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var renderProp = this.props.children;\n      var shift = this.state.shift;\n      return React.createElement(Animated.View, {\n        style: [styles.container, {\n          transform: [{\n            translateY: shift\n          }]\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return KeyboardShift;\n}(Component);\n\nexport { KeyboardShift as default };\nvar styles = StyleSheet.create({\n  container: {\n    height: '100%',\n    left: 0,\n    position: 'absolute',\n    top: 0,\n    width: '100%'\n  }\n});\nKeyboardShift.propTypes = {\n  children: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/samuelkeullen/NodeProjects/Simple-Budget-App-master/src/components/keyboard.component.js"],"names":["PropTypes","React","Component","TextInputState","TextInput","State","KeyboardShift","state","shift","Animated","Value","handleKeyboardDidShow","event","Dimensions","get","windowHeight","height","keyboardHeight","endCoordinates","currentlyFocusedField","UIManager","measure","originX","originY","width","pageX","pageY","fieldHeight","fieldTop","gap","timing","toValue","duration","useNativeDriver","start","handleKeyboardDidHide","keyboardDidShowSub","Keyboard","addListener","keyboardDidHideSub","remove","renderProp","props","children","styles","container","transform","translateY","StyleSheet","create","left","position","top","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["/**\n * Created by charanjeetelectrovese@gmail.com on system AakritiS. on 05/11/18.\n */\nimport { PropTypes } from 'prop-types';\nimport React, { Component } from 'react';\nimport { Animated, Dimensions, Keyboard, StyleSheet, TextInput, UIManager } from 'react-native';\n\nconst { State: TextInputState } = TextInput;\n\nexport default class KeyboardShift extends Component {\n    state = {\n        shift: new Animated.Value(0),\n    };\n\n    componentWillMount() {\n        this.keyboardDidShowSub = Keyboard.addListener('keyboardDidShow', this.handleKeyboardDidShow);\n        this.keyboardDidHideSub = Keyboard.addListener('keyboardDidHide', this.handleKeyboardDidHide);\n    }\n\n    componentWillUnmount() {\n        this.keyboardDidShowSub.remove();\n        this.keyboardDidHideSub.remove();\n    }\n\n    render() {\n        const { children: renderProp } = this.props;\n        const { shift } = this.state;\n        return (\n            <Animated.View style={[styles.container, { transform: [{translateY: shift}] }]}>\n                {/*{renderProp()}*/}\n                {this.props.children}\n            </Animated.View>\n        );\n    }\n\n    handleKeyboardDidShow = (event) => {\n        const { height: windowHeight } = Dimensions.get('window');\n        const keyboardHeight = event.endCoordinates.height;\n        const currentlyFocusedField = TextInputState.currentlyFocusedField();\n        UIManager.measure(currentlyFocusedField, (originX, originY, width, height, pageX, pageY) => {\n            const fieldHeight = height;\n            const fieldTop = pageY;\n            const gap = (windowHeight - keyboardHeight) - (fieldTop + fieldHeight);\n            if (gap >= 0) {\n                return;\n            }\n            Animated.timing(\n                this.state.shift,\n                {\n                    toValue: gap,\n                    duration: 200,\n                    useNativeDriver: true,\n                }\n            ).start();\n        });\n    }\n\n    handleKeyboardDidHide = () => {\n        Animated.timing(\n            this.state.shift,\n            {\n                toValue: 0,\n                duration: 200,\n                useNativeDriver: true,\n            }\n        ).start();\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        height: '100%',\n        left: 0,\n        position: 'absolute',\n        top: 0,\n        width: '100%'\n    }\n});\n\nKeyboardShift.propTypes = {\n    children: PropTypes.func.isRequired,\n};"]},"metadata":{},"sourceType":"module"}