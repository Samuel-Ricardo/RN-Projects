{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/samuelkeullen/NodeProjects/Simple-Budget-App-master/src/components/Questions/AutoComplete.component.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { ListView } from \"react-native-web/dist/index\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { colors } from \"../../styles/index.style\";\nimport Data from \"../../config/data.json\";\nimport { servieGetStates } from \"../../services/Home.service\";\nvar GOOGLE_API_KEY = 'AIzaSyB7-8qph-zszuxivIm7cwT5b37D22bm1A4';\nvar ds = new ListView.DataSource({\n  rowHasChanged: function rowHasChanged(r1, r2) {\n    return r1.id !== r2.id;\n  }\n});\nvar latitudeDelta = 0.0922;\nvar longitudeDelta = 0.0421;\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      isLoading: false,\n      dataSource: ds.cloneWithRows([]),\n      value: '',\n      data: []\n    };\n    _this.searchLocation = _this.searchLocation.bind(_assertThisInitialized(_this));\n    _this.renderRow = _this.renderRow.bind(_assertThisInitialized(_this));\n    _this.renderSeparator = _this.renderSeparator.bind(_assertThisInitialized(_this));\n    _this.onInputCleared = _this.onInputCleared.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      servieGetStates().then(function (data) {\n        if (!data.error) {\n          _this2.setState({\n            data: data.data\n          });\n        }\n      });\n    }\n  }, {\n    key: \"searchLocation\",\n    value: function searchLocation(query) {\n      var tempData;\n      return _regeneratorRuntime.async(function searchLocation$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.setState({\n                isLoading: true,\n                value: query\n              });\n              tempData = this.state.data.filter(function (val) {\n                if (val.name.toLowerCase().indexOf(query.toLowerCase()) > -1) {\n                  return true;\n                }\n              });\n              this.setState({\n                isLoading: false,\n                dataSource: ds.cloneWithRows(tempData)\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"renderRow\",\n    value: function renderRow(prediction) {\n      var _this3 = this;\n\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this3.onListItemClicked(prediction);\n        },\n        style: styles.listItem,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }\n      }, prediction.name));\n    }\n  }, {\n    key: \"renderSeparator\",\n    value: function renderSeparator() {\n      return React.createElement(View, {\n        style: styles.listItemSeparator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 16\n        }\n      });\n    }\n  }, {\n    key: \"onInputCleared\",\n    value: function onInputCleared() {\n      this.setState({\n        value: '',\n        isLoading: false,\n        dataSource: ds.cloneWithRows([])\n      });\n    }\n  }, {\n    key: \"onListItemClicked\",\n    value: function onListItemClicked(prediction) {\n      return _regeneratorRuntime.async(function onListItemClicked$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('prediction', prediction);\n              this.props.onSelection(prediction.amount);\n              this.setState({\n                value: prediction.name,\n                dataSource: ds.cloneWithRows([]),\n                isLoading: true\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, React.createElement(TextInput, {\n        ref: function ref(r) {\n          _this4.props.inputRef && _this4.props.inputRef(r);\n        },\n        value: this.state.value,\n        style: styles.inputStyle,\n        isLoading: this.state.isLoading,\n        onChangeText: this.searchLocation,\n        onInputCleared: this.onInputCleared,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }\n      }), React.createElement(View, {\n        style: styles.listViewContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }\n      }, React.createElement(ListView, {\n        keyboardShouldPersistTaps: \"always\",\n        enableEmptySections: true,\n        style: styles.listView,\n        dataSource: this.state.dataSource,\n        renderRow: this.renderRow,\n        renderSeparator: this.renderSeparator,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'flex-start'\n  },\n  progressiveInput: {\n    marginTop: 20,\n    marginLeft: 10,\n    marginRight: 10\n  },\n  listViewContainer: {\n    flex: 0,\n    maxHeight: 200\n  },\n  listView: {\n    backgroundColor: 'white'\n  },\n  listItem: {\n    padding: 10\n  },\n  listItemSeparator: {\n    borderWidth: 0.5,\n    borderColor: 'lightgrey'\n  },\n  inputStyle: {\n    height: 40,\n    borderBottomWidth: 3,\n    borderBottomColor: colors.white,\n    marginTop: 10,\n    color: colors.white,\n    fontSize: 16,\n    fontFamily: 'Roboto'\n  }\n});","map":{"version":3,"sources":["/home/samuelkeullen/NodeProjects/Simple-Budget-App-master/src/components/Questions/AutoComplete.component.js"],"names":["React","Component","ListView","colors","Data","servieGetStates","GOOGLE_API_KEY","ds","DataSource","rowHasChanged","r1","r2","id","latitudeDelta","longitudeDelta","App","props","state","isLoading","dataSource","cloneWithRows","value","data","searchLocation","bind","renderRow","renderSeparator","onInputCleared","then","error","setState","query","tempData","filter","val","name","toLowerCase","indexOf","prediction","onListItemClicked","styles","listItem","listItemSeparator","console","log","onSelection","amount","container","r","inputRef","inputStyle","listViewContainer","listView","StyleSheet","create","flex","flexDirection","justifyContent","progressiveInput","marginTop","marginLeft","marginRight","maxHeight","backgroundColor","padding","borderWidth","borderColor","height","borderBottomWidth","borderBottomColor","white","color","fontSize","fontFamily"],"mappings":";;;;;;;;;;;;;AAMA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;SAKIC,Q;;;AAIJ,SAASC,MAAT;AACA,OAAOC,IAAP;AACA,SAASC,eAAT;AACA,IAAMC,cAAc,GAAG,yCAAvB;AACA,IAAMC,EAAE,GAAG,IAAIL,QAAQ,CAACM,UAAb,CAAwB;AAC/BC,EAAAA,aAAa,EAAE,uBAACC,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,CAACE,EAAH,KAAUD,EAAE,CAACC,EAAzB;AAAA;AADgB,CAAxB,CAAX;AAGA,IAAMC,aAAa,GAAG,MAAtB;AACA,IAAMC,cAAc,GAAG,MAAvB;;IAEqBC,G;;;;;AACjB,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,KADF;AAETC,MAAAA,UAAU,EAAEZ,EAAE,CAACa,aAAH,CAAiB,EAAjB,CAFH;AAGTC,MAAAA,KAAK,EAAE,EAHE;AAITC,MAAAA,IAAI,EAAE;AAJG,KAAb;AAMA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,+BAAtB;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,+BAAjB;AACA,UAAKE,eAAL,GAAuB,MAAKA,eAAL,CAAqBF,IAArB,+BAAvB;AACA,UAAKG,cAAL,GAAsB,MAAKA,cAAL,CAAoBH,IAApB,+BAAtB;AAXe;AAYlB;;;;yCACoB;AAAA;;AACjBnB,MAAAA,eAAe,GAAGuB,IAAlB,CAAuB,UAACN,IAAD,EAAU;AAC7B,YAAG,CAACA,IAAI,CAACO,KAAT,EAAgB;AACZ,UAAA,MAAI,CAACC,QAAL,CAAc;AAAER,YAAAA,IAAI,EAAEA,IAAI,CAACA;AAAb,WAAd;AACH;AACJ,OAJD;AAKH;;;mCAEoBS,K;;;;;;AACjB,mBAAKD,QAAL,CAAc;AAAEZ,gBAAAA,SAAS,EAAE,IAAb;AAAmBG,gBAAAA,KAAK,EAAEU;AAA1B,eAAd;AACMC,cAAAA,Q,GAAW,KAAKf,KAAL,CAAWK,IAAX,CAAgBW,MAAhB,CAAuB,UAACC,GAAD,EAAS;AAC7C,oBAAGA,GAAG,CAACC,IAAJ,CAASC,WAAT,GAAuBC,OAAvB,CAA+BN,KAAK,CAACK,WAAN,EAA/B,IAAsD,CAAC,CAA1D,EAA6D;AACzD,yBAAO,IAAP;AACH;AACJ,eAJgB,C;AAKjB,mBAAKN,QAAL,CAAc;AACVZ,gBAAAA,SAAS,EAAE,KADD;AAEVC,gBAAAA,UAAU,EAAEZ,EAAE,CAACa,aAAH,CAAiBY,QAAjB;AAFF,eAAd;;;;;;;;;;;8BAMMM,U,EAAY;AAAA;;AAClB,aACI,oBAAC,gBAAD;AACI,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACC,iBAAL,CAAuBD,UAAvB,CAAN;AAAA,SADb;AAEI,QAAA,KAAK,EAAEE,MAAM,CAACC,QAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOH,UAAU,CAACH,IAAlB,CAJJ,CADJ;AAQH;;;sCAEiB;AACd,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEK,MAAM,CAACE,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;;qCAEgB;AACb,WAAKZ,QAAL,CAAc;AACVT,QAAAA,KAAK,EAAE,EADG;AAEVH,QAAAA,SAAS,EAAE,KAFD;AAGVC,QAAAA,UAAU,EAAEZ,EAAE,CAACa,aAAH,CAAiB,EAAjB;AAHF,OAAd;AAKH;;;sCAEuBkB,U;;;;;AACpBK,cAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BN,UAA1B;AACA,mBAAKtB,KAAL,CAAW6B,WAAX,CAAuBP,UAAU,CAACQ,MAAlC;AACA,mBAAKhB,QAAL,CAAc;AACVT,gBAAAA,KAAK,EAAEiB,UAAU,CAACH,IADR;AAEVhB,gBAAAA,UAAU,EAAEZ,EAAE,CAACa,aAAH,CAAiB,EAAjB,CAFF;AAGVF,gBAAAA,SAAS,EAAE;AAHD,eAAd;;;;;;;;;;;6BAOK;AAAA;;AACL,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEsB,MAAM,CAACO,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AACI,QAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AAAE,UAAA,MAAI,CAAChC,KAAL,CAAWiC,QAAX,IAAuB,MAAI,CAACjC,KAAL,CAAWiC,QAAX,CAAoBD,CAApB,CAAvB;AAA+C,SADjE;AAEI,QAAA,KAAK,EAAE,KAAK/B,KAAL,CAAWI,KAFtB;AAGI,QAAA,KAAK,EAAEmB,MAAM,CAACU,UAHlB;AAII,QAAA,SAAS,EAAE,KAAKjC,KAAL,CAAWC,SAJ1B;AAKI,QAAA,YAAY,EAAE,KAAKK,cALvB;AAMI,QAAA,cAAc,EAAE,KAAKI,cANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEa,MAAM,CAACW,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AACI,QAAA,yBAAyB,EAAC,QAD9B;AAEI,QAAA,mBAAmB,MAFvB;AAGI,QAAA,KAAK,EAAEX,MAAM,CAACY,QAHlB;AAII,QAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWE,UAJ3B;AAKI,QAAA,SAAS,EAAE,KAAKM,SALpB;AAMI,QAAA,eAAe,EAAE,KAAKC,eAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CATJ,CADJ;AAsBH;;;;EA3F4B1B,KAAK,CAACC,S;;SAAlBc,G;AA8FrB,IAAMyB,MAAM,GAAGa,UAAU,CAACC,MAAX,CAAkB;AAC7BP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,aAAa,EAAE,QAFR;AAGPC,IAAAA,cAAc,EAAE;AAHT,GADkB;AAM7BC,EAAAA,gBAAgB,EAAE;AACdC,IAAAA,SAAS,EAAE,EADG;AAEdC,IAAAA,UAAU,EAAE,EAFE;AAGdC,IAAAA,WAAW,EAAE;AAHC,GANW;AAW7BV,EAAAA,iBAAiB,EAAE;AACfI,IAAAA,IAAI,EAAE,CADS;AAEfO,IAAAA,SAAS,EAAE;AAFI,GAXU;AAe7BV,EAAAA,QAAQ,EAAE;AACNW,IAAAA,eAAe,EAAE;AADX,GAfmB;AAmB7BtB,EAAAA,QAAQ,EAAE;AACNuB,IAAAA,OAAO,EAAE;AADH,GAnBmB;AAsB7BtB,EAAAA,iBAAiB,EAAE;AACfuB,IAAAA,WAAW,EAAE,GADE;AAEfC,IAAAA,WAAW,EAAE;AAFE,GAtBU;AA0B7BhB,EAAAA,UAAU,EAAE;AACRiB,IAAAA,MAAM,EAAE,EADA;AAERC,IAAAA,iBAAiB,EAAE,CAFX;AAGRC,IAAAA,iBAAiB,EAAElE,MAAM,CAACmE,KAHlB;AAIRX,IAAAA,SAAS,EAAE,EAJH;AAKRY,IAAAA,KAAK,EAAEpE,MAAM,CAACmE,KALN;AAMRE,IAAAA,QAAQ,EAAE,EANF;AAORC,IAAAA,UAAU,EAAE;AAPJ;AA1BiB,CAAlB,CAAf","sourcesContent":["/**\n * Created by charanjeetelectrovese@gmail.com on system AakritiS. on 16/10/18.\n */\n/**\n * Created by charanjeetelectrovese@gmail.com on system AakritiS. on 16/10/18.\n */\nimport React, { Component } from 'react';\nimport {\n    StyleSheet,\n    Text,\n    View,\n    ListView,\n    TouchableOpacity,\n    TextInput\n} from 'react-native';\nimport { colors } from '../../styles/index.style';\nimport Data from '../../config/data.json';\nimport { servieGetStates } from '../../services/Home.service';\nconst GOOGLE_API_KEY = 'AIzaSyB7-8qph-zszuxivIm7cwT5b37D22bm1A4';\nconst ds = new ListView.DataSource({\n    rowHasChanged: (r1, r2) => r1.id !== r2.id,\n});\nconst latitudeDelta = 0.0922;\nconst longitudeDelta = 0.0421;\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            dataSource: ds.cloneWithRows([]),\n            value: '',\n            data: [],\n        };\n        this.searchLocation = this.searchLocation.bind(this);\n        this.renderRow = this.renderRow.bind(this);\n        this.renderSeparator = this.renderSeparator.bind(this);\n        this.onInputCleared = this.onInputCleared.bind(this);\n    }\n    componentWillMount() {\n        servieGetStates().then((data) => {\n            if(!data.error) {\n                this.setState({ data: data.data });\n            }\n        })\n    }\n\n    async searchLocation(query) {\n        this.setState({ isLoading: true, value: query });\n        const tempData = this.state.data.filter((val) => {\n            if(val.name.toLowerCase().indexOf(query.toLowerCase()) > -1) {\n                return true;\n            }\n        })\n        this.setState({\n            isLoading: false,\n            dataSource: ds.cloneWithRows(tempData),\n        });\n    }\n\n    renderRow(prediction) {\n        return (\n            <TouchableOpacity\n                onPress={() => this.onListItemClicked(prediction)}\n                style={styles.listItem}\n            >\n                <Text>{prediction.name}</Text>\n            </TouchableOpacity>\n        );\n    }\n\n    renderSeparator() {\n        return <View style={styles.listItemSeparator} />;\n    }\n\n    onInputCleared() {\n        this.setState({\n            value: '',\n            isLoading: false,\n            dataSource: ds.cloneWithRows([]),\n        });\n    }\n\n    async onListItemClicked(prediction) {\n        console.log('prediction', prediction);\n        this.props.onSelection(prediction.amount);\n        this.setState({\n            value: prediction.name,\n            dataSource: ds.cloneWithRows([]),\n            isLoading: true,\n        });\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <TextInput\n                    ref={(r) => { this.props.inputRef && this.props.inputRef(r) }}\n                    value={this.state.value}\n                    style={styles.inputStyle}\n                    isLoading={this.state.isLoading}\n                    onChangeText={this.searchLocation}\n                    onInputCleared={this.onInputCleared}\n                />\n                <View style={styles.listViewContainer}>\n                    <ListView\n                        keyboardShouldPersistTaps=\"always\"\n                        enableEmptySections\n                        style={styles.listView}\n                        dataSource={this.state.dataSource}\n                        renderRow={this.renderRow}\n                        renderSeparator={this.renderSeparator}\n                    />\n                </View>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        flexDirection: 'column',\n        justifyContent: 'flex-start',\n    },\n    progressiveInput: {\n        marginTop: 20,\n        marginLeft: 10,\n        marginRight: 10,\n    },\n    listViewContainer: {\n        flex: 0,\n        maxHeight: 200,\n    },\n    listView: {\n        backgroundColor: 'white',\n        // margin: 10,\n    },\n    listItem: {\n        padding: 10,\n    },\n    listItemSeparator: {\n        borderWidth: 0.5,\n        borderColor: 'lightgrey',\n    },\n    inputStyle: {\n        height: 40,\n        borderBottomWidth: 3,\n        borderBottomColor: colors.white,\n        marginTop: 10,\n        color: colors.white,\n        fontSize: 16,\n        fontFamily: 'Roboto'\n    }\n});"]},"metadata":{},"sourceType":"module"}